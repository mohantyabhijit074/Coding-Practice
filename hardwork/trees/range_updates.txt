#include<iostream>
using namespace std;
#include<bits/stdc++.h>
#define mod 1000000007
#define ll long long

void build(int *arr,int *segtree,int s,int e,int tidx)
{   //base case
    if(s==e)
    {
        segtree[tidx] = arr[s];
        return;
    }
    int mid = (s+e)/2;
    build(arr,segtree,s,mid,2*tidx);
    build(arr,segtree,mid+1,e,2*tidx+1);

    segtree[tidx] = segtree[2*tidx] + segtree[2*tidx+1];
}

void update(int *tree,int *lazy,int s,int e,int tidx,int l,int r,int val)
{
    if(lazy[tidx]!=0)
    {
        tree[tidx]+=(e-s+1)*lazy[tidx];
        if(s!=e)
        {
            lazy[2*tidx] += lazy[tidx];
            lazy[2*tidx+1] += lazy[tidx];
        }
        lazy[tidx] = 0;
    }
    if(s>e || s>r || e<l)
    {
        return;
    }
    if(s>=l and e<=r)
    {
        tree[tidx]+=(e-s+1)*val;
        if(s!=e)
        {
            lazy[2*tidx] += val;
            lazy[2*tidx+1] += val;
        }
        return;
    }   
    int mid = (s+e)/2;
    update(tree,lazy,s,mid,2*tidx,l,r,val);
    update(tree,lazy,mid+1,e,2*tidx+1,l,r,val);
    tree[tidx] = tree[2*tidx] + tree[2*tidx+1];
}


int query(int *tree,int *lazy,int s,int e,int tidx,int l,int r)
{
    if(s>e || s>r || e<l)
    {
        return 0;
    }
    if(lazy[tidx]!=0)
    {
        tree[tidx] += (e-s+1)*lazy[tidx];
        if(s!=e)
        {
            lazy[2*tidx] += lazy[tidx];
            lazy[2*tidx+1] += lazy[tidx];
        }
        lazy[tidx] = 0;
    }
    if(s>=l and e<=r)
    {
        return tree[tidx];
    }
    int mid = (s+e)/2;
    int a = query(tree,lazy,s,mid,2*tidx,l,r);
    int b = query(tree,lazy,mid+1,e,2*tidx+1,l,r);
    return a+b;
}
void solve()
{
    int n;
    cin >> n;
    int *arr = new int[n];
    int q;
    cin >> q;
    for(int i = 0;i<n;i++)
    {
        cin >> arr[i];
    }
    int *seg_tree = new int[4*n];
    int *lazy = new int[4*n];
    for(int i = 0;i<4*n;i++)
    {
        lazy[i] = 0;
    }
    build(arr,seg_tree,0,n-1,1);
    while(q--)
    {
        int type;
        cin >> type;
        if(type==3)
        {
            int l,r;
            cin >> l >> r;
            l--;
            r--;
            cout << query(seg_tree,lazy,0,n-1,1,l,r) <<"\n";
        }
        else
        {
            int l,r,val;
            cin >> l >> r >> val;
            l--;
            r--;
            //cout << l << " " << r <<" " << val <<"\n";
            update(seg_tree,lazy,0,n-1,1,l,r,val);
        }
    }

}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t;
    //cin >> t;
    t = 1;
    while(t--)
    {
        solve();
    }
    return 0;
}