#include<iostream>
#include<bits/stdc++.h>
using namespace std;
const int mod = 1e3+3;
int countWays(int n, string s){
    // code here
    string a,b;
    for(int i = 0;i<n;++i)
    {
        if(i%2==0)
        {
            a+=s[i];
        }
        else 
        {
            b+=s[i];
        }
    }
    //cout << a.length() <<"\n";
    //cout << b.length() <<"\n";
    int m = a.length();
    int dpt[m][m];
    int dpf[m][m];
    memset(dpt,0,sizeof(dpt));
    memset(dpf,0,sizeof(dpf));
    for(int g=0;g<m;++g)
    {
        for(int i=0,j = g;j<m;i++,j++)
        {
            char ch = a[i];
            if(g==0)
            {
                if(ch=='T')
                {
                    dpt[i][j] = 1;
                    dpf[i][j] = 0;
                }
                else 
                {
                    dpt[i][j] = 0;
                    dpf[i][j] = 1;
                }
            }
            else 
            {
                for(int k = i;k<j;++k)
                {
                    char op = b[k];
                    int ltc = dpt[i][k];
                    int rtc = dpt[k+1][j];
                    int lfc = dpf[i][k];
                    int rfc = dpf[k+1][j];
                    if(op=='|')
                    {
                        dpt[i][j] += (ltc*rtc+ltc*rfc+lfc*rtc)%mod;
                        dpf[i][j] += (lfc*rfc)%mod;
                        dpt[i][j]%=mod;
                        dpf[i][j]%=mod;
                    }
                    else if(op=='&') 
                    {
                        dpt[i][j] += (ltc*rtc)%mod;
                        dpf[i][j] += (lfc*rtc+ltc*rfc+lfc*rfc)%mod;
                        dpt[i][j]%=mod;
                        dpf[i][j]%=mod;
                    }
                    else 
                    {
                        dpt[i][j] += (ltc*rfc + lfc*rtc)%mod;
                        dpf[i][j] += (ltc*rtc + lfc*rfc)%mod;
                        dpt[i][j]%=mod;
                        dpf[i][j]%=mod;
                    }
                    
                }
            }
        }
    }
    return dpt[0][m-1];
}
int main()
{
    int n;
    string s;
    cin >> n >> s;
    cout << countWays(n,s) <<"\n";
}