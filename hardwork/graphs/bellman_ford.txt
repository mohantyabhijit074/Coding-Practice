#include<iostream>
using namespace std;
#include<bits/stdc++.h>
#define mod 1000000007
#define ll long long
const ll inf = 1e17;
const ll ninf = (-1)*1e17;

struct Node{
    ll src;
    ll dest;
    ll cost;
};
ll n,m;
vector<Node> edges;
vector<ll> dist;

void bellman_ford()
{
    for(int i = 0;i<n;++i)
    {
        for(struct Node e: edges)
        {
            ll u = e.src;
            ll v = e.dest;
            ll d = e.cost;
            if(dist[u]==inf) continue;
            dist[v] = min(dist[v],d+dist[u]);
            dist[v] = max(dist[v],ninf);
        }
    }
    for(int i = 1;i<n;++i)
    {
        for(auto e:edges)
        {
            ll u = e.src;
            ll v = e.dest;
            ll d = e.cost;
            if(dist[u]==inf) continue;
            dist[v] = max(dist[v],ninf);
            if(dist[u]+d<dist[v])
            {
                dist[v] = ninf;
            }
        }
    }
}

void solve()
{
    cin >> n >> m;
    dist.resize(n+1);
    edges.resize(m);
    for(int i = 0;i< m;i++)
    {
        struct Node input;
        cin >> input.src >> input.dest >> input.cost;
        input.cost*=-1;
        edges[i] = input;
    }
    for(int i = 2;i<=n;i++)
    {
        dist[i] = inf;
    }
    bellman_ford();
    if(dist[n]==ninf)
    {
        cout << -1 <<"\n";
        return;
    }
    cout << dist[n]*(-1) <<"\n";
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t;
    //cin >> t;
    t = 1;
    while(t--)
    {
        solve();
    }
    return 0;
}