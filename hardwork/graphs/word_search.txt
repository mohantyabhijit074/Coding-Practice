#include<iostream>
using namespace std;
#include<bits/stdc++.h>
#define mod 1000000007
#define ll long long
bool dfs(vector<vector<char>> &grid,string s,int i,int j,int k)
{
    if(k==s.size())
    {
        return true;
    }
    if(i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || grid[i][j]!=s[k])
    {
        return false;
    }
    
    char temp = grid[i][j];
    grid[i][j]='$';
    bool f = dfs(grid,s,i+1,j,k+1) || 
    dfs(grid,s,i-1,j,k+1) ||
    dfs(grid,s,i,j+1,k+1) || 
    dfs(grid,s,i,j-1,k+1);
    grid[i][j] = temp;
    return f;
}
void solve()
{
    int n,m;
    cin >> n >> m;
    vector<vector<char>> arr(n,vector<char>(m));
    for(int i = 0;i<n;i++)
    {
        for(int j = 0;j<m;j++)
        {
            cin >> arr[i][j];
        }
    }
    string s;
    cin >> s;
    vector<pair<int,int>> v;
    for(int i = 0;i<n;i++)
    {
        for(int j = 0;j<m;j++)
        {
            if(arr[i][j]==s[0])
            {
                v.push_back({i,j});
            }
        }
    }
    int f = 0;
    for(auto it : v)
    {
        int k =0;
        //cout << it.first <<" "<<it.second<<"\n";
        if(dfs(arr,s,it.first,it.second,k))
        {
           
            cout << "YES\n";
            f = 1;
            return;
        }
    }
    if(f==0)
    {
        cout <<"NO\n";
        return;
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t;
    //cin >> t;
    t = 1;
    while(t--)
    {
        solve();
    }
    return 0;
}