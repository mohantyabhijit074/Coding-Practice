#include<iostream>
using namespace std;
#include<bits/stdc++.h>
#define mod 1000000007
#define ll long long
#define piv pair<int,vector<int>> 
class Graph{
    public:
        int v,e;
        list<pair<ll,ll>>* adj;
        int result = 0;
    Graph(int v,int e)
    {
        this->v = v;
        this->e = e;
        this->adj = new list<pair<ll,ll>>[this->v];
    }
    void addEdge(int src,int des,int wt) 
    {
        this->addEdge[src].push_back({des,wt});
    }
    pair<int,vector<int>> bfspath(int d,ll m)
    {
        queue<int> q;
        q.push(0);
        vector<bool> vis(this->v,false);
        vector<int> parent(this->v,-1);
        vector<int> dis(this->v,-1);
        dis[src] = 0;
        parent[src] = src;
        while(!q.empty())
        {
            int cur = q.front();
            q.pop();
            for(auto el:this->adj[cur])
            {
                if(!vis[el.first])
                {
                    if(el.second<=m)
                    {
                        vis[el.first] = true;
                        q.push(el.first);
                        dis[el.first] = dis[cur]+1;
                        parent[el.first] = cur;
                    }
                }
            }
        }
        return {dis[n-1],parent};
    }
    
};

void solve()
{
    ll n,m,d,src,dest,wt;
    ll min_wt = numeric_limits<ll>::max();
    ll max_wt = numeric_limits<ll>::min();
    cin >> n >> m >> d;
    Graph *g = new Graph(n,m);
    for(int i = 0;i<m;i++)
    {
        cin >> src >> dest >> wt;
        min_wt = min(min_wt,wt);
        max_wt = max(max_wt,wt);
        g->addEdge(src-1,dest-1,wt);
    }
    ll l = min_wt,h = max_wt;
    vector<int> parent;
    ll ans = -1;
    while(l<=h)
    {
        ll mid = l+(h-l)2/2;
        piv result = g->bfspath(d,m);
        if(result.first==-1 || result.first>d)
        {
            l = m+1;
        }
        else
        {
            ans = result.first;
            parent.push_back(result.second);
            h = m-1;
        }
    }
    cout << ans <<"\n";
    int vertex = n-1;
    if(ans==-1)
        return -1;
    vector<int> path;
    while(parent[vertex]!=vertex)
    {
        path.push_back(vertes+1);
        vertex = parent[vertex];
    }
    path.push_back(vertex+1);
    reverse(path.begin(),path.end());
    for(auto x:path)
    {
        cout << x <<" ";
    }
    cout <<"\n";
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t;
    //cin >> t;
    t = 1;
    while(t--)
    {
        solve();
    }
    return 0;
}