#include<iostream>
using namespace std;
#include<bits/stdc++.h>
#define mod 1000000007
#define ll long long
string alien(vector<string> &words)
{
	unordered_map<char,list<char> > adjlist;//vertex,neighbour
	unordered_map<char,int> indegree;
	for(string &str: words)
	{
		for(char &ch : str)
		{
			indegree[ch] = 0;
			list<char> li;
			adjlist[ch] = li;
		}
	}
	for(int i=0;i<words.size()-1;i++)
	{
		string w1 = words[i];
		string w2 = words[i+1];
		//if w2 is prefix 
		auto res = mismatch(w2.begin(),w2.end(),w1.begin());
		if(w1.size()>w2.size() && res.first == w2.end())
		{
			return "NOT POSSIBLE";
		}
		//extract the first non equal character
		for(int j=0;j<min(w1.size(),w2.size());j++)
		{
			if(w1[j]!=w2[j])
			{
				adjlist[w1[j]].push_back(w2[j]);
				indegree[w2[j]]++;
				break;
			}
		}
	}
	//topo sort
	string result = "";
	queue<char> q;
	for(auto it = indegree.begin();it!=indegree.end();it++)
	{
		if(indegree[it->first]==0)
		{
			q.push(it->first);
		}
	}
	while(!q.empty())
	{
		char ch = q.front();
		q.pop();
		result+=ch;
		for(auto neighbour : adjlist[ch])
		{
			indegree[neighbour]-=1;
			if(indegree[neighbour]==0)
			{
				q.push(neighbour);
			}
		}
	}
	if(result.size()<indegree.size())
	{	return "NOT POSSIBLE";
	}
	return result;

}
void solve()
{
	int n;
	cin >> n;
	vector<string> words(n);
	for(int i=0;i<n;i++)
	{
		cin >> words[i];
		//cout << words[i] <<" ";
	}	  
	cout << alien(words) <<"\n";
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	ll t;
	//cin >> t;
	t = 1;
	while(t--)
	{
		solve();
	}
	return 0;
}