#include<iostream>
using namespace std;
#include<bits/stdc++.h>
#define mod 1000000007
#define ll long long
int check(pair<int,int> p,int n)
{
	if(p.first<0 || p.first>n-1 || p.second<0 || p.second>n-1)
		return 0;
	return 1;
}
void solve()
{
	int n;
	cin >> n;
	vector<vector<int> > grid(n,vector<int>(n,0));
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			cin >> grid[i][j];
		}
	}
	int result = 0;
	queue<pair<int,int> >q;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(grid[i][j]==1)
			{
				q.push({i,j});
			}
		}
	}
	#if 1
	q.push({-1,-1});
	set<pair<int,int> > visited;
	int k = 0;
	while(!q.empty())
	{
		pair<int,int> cur = q.front();
		q.pop();
		//cout << cur.first <<" "<< cur.second <<"\n";

		if(cur.first == -1 && cur.second ==-1)
		{
			result++;
			q.push({-1,-1});
			//continue;
		}
		else
		{
			k++;
		}
		if(k>n*n)
		{
			break;
		}
		
		int xdir[] = {-1,1,0,0};
		int ydir[] = {0,0,-1,1};
		for(int d=0;d<4;d++)
		{	
			if(check({cur.first + xdir[d],cur.second+ydir[d]},n) && !visited.count({cur.first + xdir[d],cur.second+ydir[d]}))
			{
				q.push({cur.first + xdir[d],cur.second+ydir[d]});
				visited.insert({cur.first + xdir[d],cur.second+ydir[d]});

			}
	
		}
	}
	#endif
	cout << result - 1 <<"\n";

}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	ll t;
	//cin >> t;
	t = 1;
	while(t--)
	{
		solve();
	}
	return 0;
}